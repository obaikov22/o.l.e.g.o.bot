import discord
from discord.ext import commands
from discord import app_commands
from discord.ui import View, Button, Modal, TextInput
import asyncio
import sys
import os

intents = discord.Intents.all()
bot = commands.Bot(command_prefix="!", intents=intents)
tree = bot.tree

active_tickets = {}  # user_id: channel_id

# üîí –ü—Ä–æ–≤–µ—Ä–∫–∞: —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã
def is_admin():
    async def predicate(interaction: discord.Interaction):
        return interaction.user.guild_permissions.administrator
    return app_commands.check(predicate)

@bot.event
async def on_ready():
    print(f"‚úÖ Logged in as {bot.user}")
    try:
        await tree.sync()
        print("üîÑ –°–ª–µ—à-–∫–æ–º–∞–Ω–¥—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")

# üì§ –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
class AdminPanel(View):
    def __init__(self):
        super().__init__(timeout=None)
        self.add_item(SendMessageButton())
        self.add_item(SendDMButton())
        self.add_item(CreateTicketButton())

class SendMessageButton(Button):
    def __init__(self):
        super().__init__(label="üì£ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", style=discord.ButtonStyle.primary)

    async def callback(self, interaction: discord.Interaction):
        await interaction.response.send_modal(SendMessageModal())

class SendDMButton(Button):
    def __init__(self):
        super().__init__(label="üíå –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –õ–°", style=discord.ButtonStyle.success)

    async def callback(self, interaction: discord.Interaction):
        await interaction.response.send_modal(SendDMModal())

class CreateTicketButton(Button):
    def __init__(self):
        super().__init__(label="üé´ –°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç", style=discord.ButtonStyle.secondary)

    async def callback(self, interaction: discord.Interaction):
        await interaction.response.send_modal(CreateTicketModal())

# üßæ –ú–æ–¥–∞–ª–∫–∏
class SendMessageModal(Modal, title="üì£ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"):
    channel = TextInput(label="–ù–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ ID –∫–∞–Ω–∞–ª–∞ (#–∏–º—è –∏–ª–∏ ID)", placeholder="#–æ–±—â–∏–π")
    content = TextInput(label="–°–æ–æ–±—â–µ–Ω–∏–µ", style=discord.TextStyle.paragraph)

    async def on_submit(self, interaction: discord.Interaction):
        try:
            channel = discord.utils.get(interaction.guild.text_channels, name=self.channel.value.strip('#')) \
                      or interaction.guild.get_channel(int(self.channel.value))
            await channel.send(self.content.value)
            await interaction.response.send_message("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.", ephemeral=True)
        except:
            await interaction.response.send_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.", ephemeral=True)

class SendDMModal(Modal, title="üíå –û—Ç–ø—Ä–∞–≤–∫–∞ –õ–°"):
    user_id = TextInput(label="ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    content = TextInput(label="–°–æ–æ–±—â–µ–Ω–∏–µ", style=discord.TextStyle.paragraph)

    async def on_submit(self, interaction: discord.Interaction):
        try:
            user = await bot.fetch_user(int(self.user_id.value))
            await user.send(self.content.value)
            await interaction.response.send_message("‚úÖ –õ–° –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.", ephemeral=True)
        except:
            await interaction.response.send_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –õ–°.", ephemeral=True)

class CreateTicketModal(Modal, title="üé´ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞"):
    issue = TextInput(label="–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É", style=discord.TextStyle.paragraph)

    async def on_submit(self, interaction: discord.Interaction):
        user = interaction.user
        guild = interaction.guild

        if user.id in active_tickets:
            await interaction.response.send_message("‚ùó –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–π —Ç–∏–∫–µ—Ç.", ephemeral=True)
            return

        overwrites = {
            guild.default_role: discord.PermissionOverwrite(read_messages=False),
            user: discord.PermissionOverwrite(read_messages=True, send_messages=True),
            guild.me: discord.PermissionOverwrite(read_messages=True, send_messages=True)
        }

        category_id = os.getenv("TICKET_CATEGORY_ID")
        category = guild.get_channel(int(category_id)) if category_id else None

        ticket_channel = await guild.create_text_channel(
            name=f"ticket-{user.name}-{user.discriminator}",
            overwrites=overwrites,
            topic=f"–¢–∏–∫–µ—Ç –æ—Ç {user.name}",
            category=category
        )

        active_tickets[user.id] = ticket_channel.id
        await ticket_channel.send(f"{user.mention}, –≤–∞—à —Ç–∏–∫–µ—Ç —Å–æ–∑–¥–∞–Ω! –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É.")
        await interaction.response.send_message(f"üì© –¢–∏–∫–µ—Ç —Å–æ–∑–¥–∞–Ω: {ticket_channel.mention}", ephemeral=True)

# üì• –ö–æ–º–∞–Ω–¥–∞: –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@tree.command(name="admin_panel", description="–û—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
@is_admin()
async def admin_panel(interaction: discord.Interaction):
    await interaction.response.defer(ephemeral=True)
    await interaction.followup.send("üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", view=AdminPanel(), ephemeral=True)

# üß∑ –ö–æ–º–∞–Ω–¥–∞: —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∞–∫—Ü–∏–µ–π
@tree.command(name="setup_ticket_message", description="–†–∞–∑–º–µ—Å—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–∏–∫–µ—Ç-—Ä–µ–∞–∫—Ü–∏–µ–π")
@is_admin()
async def setup_ticket_message(interaction: discord.Interaction):
    message = await interaction.channel.send("–ù–∞–∂–º–∏—Ç–µ üé´, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç.")
    await message.add_reaction("üé´")
    await interaction.response.send_message("‚úÖ –ì–æ—Ç–æ–≤–æ. –°–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–∑–º–µ—â–µ–Ω–æ.", ephemeral=True)

# üé´ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∞–∫—Ü–∏–∏
@bot.event
async def on_raw_reaction_add(payload):
    if payload.user_id == bot.user.id or str(payload.emoji) != "üé´":
        return

    guild = bot.get_guild(payload.guild_id)
    user = guild.get_member(payload.user_id)

    if not user or user.bot:
        return

    if user.id in active_tickets:
        try:
            await user.send("‚ùó –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–π —Ç–∏–∫–µ—Ç.")
        except:
            pass
        return

    overwrites = {
        guild.default_role: discord.PermissionOverwrite(read_messages=False),
        user: discord.PermissionOverwrite(read_messages=True, send_messages=True),
        guild.me: discord.PermissionOverwrite(read_messages=True, send_messages=True)
    }

    ticket_channel = await guild.create_text_channel(
        name=f"ticket-{user.name}-{user.discriminator}",
        overwrites=overwrites,
        topic=f"–¢–∏–∫–µ—Ç –æ—Ç {user.name}"
    )

    active_tickets[user.id] = ticket_channel.id
    await ticket_channel.send(f"{user.mention}, –≤–∞—à —Ç–∏–∫–µ—Ç —Å–æ–∑–¥–∞–Ω! –ù–∞–ø–∏—à–∏—Ç–µ, –≤ —á—ë–º –ø—Ä–æ–±–ª–µ–º–∞.")
    try:
        await user.send(f"üì© –í–∞—à —Ç–∏–∫–µ—Ç —Å–æ–∑–¥–∞–Ω: {ticket_channel.mention}")
    except:
        pass

# ‚ùå –ö–æ–º–∞–Ω–¥–∞: –∑–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç
@tree.command(name="close_ticket", description="–ó–∞–∫—Ä—ã—Ç—å —Ç–µ–∫—É—â–∏–π —Ç–∏–∫–µ—Ç")
@is_admin()
async def close_ticket(interaction: discord.Interaction):
    channel = interaction.channel
    for user_id, ch_id in list(active_tickets.items()):
        if ch_id == channel.id:
            del active_tickets[user_id]
            break

    await interaction.response.defer(ephemeral=True)
    await interaction.followup.send("–¢–∏–∫–µ—Ç –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...", ephemeral=True)
    await asyncio.sleep(5)
    await channel.delete()

# ü™ü Fix –¥–ª—è Windows (aiodns)
if sys.platform.startswith("win"):
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

# üîë –ó–∞–ø—É—Å–∫
bot.run(os.getenv("DISCORD_TOKEN"))
